#+PROPERTY: header-args :tangle out/Poly.hs :mkdirp true :session poly :comments link

* Poor Polynomials

  *NOTE* I added some polymorphism after doing this for ~Int~ which I
  don't think is well founded.

  #+begin_src haskell :session none
    {-# LANGUAGE TypeApplications #-}
    {-# LANGUAGE NamedFieldPuns #-}
    {-# LANGUAGE ScopedTypeVariables #-}

    module Poly where
  #+end_src

  #+begin_src haskell
    import Prelude hiding (exp)
    import Data.Coerce (coerce)
    import Data.Foldable (fold)
    import Data.Monoid (Sum (..))
    import Data.List (intersperse, foldl')
    import Data.Maybe (catMaybes, isJust)
  #+end_src

  #+begin_quote

  We want to represent polynomials using lists, such that the
  coefficients are stored from the most significant to the least
  significant. That is, the polynomial

    2x^3 - 3x^2 + 7

  would be represented as

    [2,-3,0,7]
  #+end_quote

  #+begin_src haskell
    newtype Poly n = Poly {unPoly :: [n]}

    data Term n = Term {exp :: Int, coeff :: n}
  #+end_src

* Properties of ~Poly~

    * (1 points) The toPoly function allows you to receive an
      arbitrary list of numbers and "convert" it into a Poly.
    * (1 points) The Show instance shows the polynomials in algebraic
      notation instead of a simple list.
    * (1 point) The addPoly p0 p1 function allows adding two
      polynomials.
    * (2 points) The evalPoly p x function allows to evaluate the
      value of the polynomial p at point x.

    You cannot use length or reverse in its implementation. To obtain
    all the points, the implementation of each function has to make a
    single pass through the list that internally represents the
    polynomial.

    #+begin_src haskell
      toPoly :: Num n => [n] -> Poly n
      toPoly = Poly . foldr (\x -> (<> [x])) []

      terms :: Poly n -> [Term n]
      terms = zipWith Term [0..] . coerce

      showTerm' :: (Num n, Eq n, Show n) => Term n -> [String]
      showTerm' Term{exp,     coeff = 0} = []
      showTerm' Term{exp = 0, coeff}     = [show coeff]
      showTerm' Term{exp,     coeff}     = [show coeff <> "x^" <> show exp]

      instance (Num n, Eq n, Show n) => Show (Poly n) where
        show =
          unwords . intersperse "+" . foldr (flip (<>) . showTerm') [] . terms

      addTerm :: forall a. Num a => Maybe a -> Maybe a -> Maybe a
      addTerm x y = coerce @(Maybe (Sum a)) (coerce x <> coerce y)

      addPoly :: Num n => Poly n -> Poly n -> Poly n
      addPoly (Poly p1) (Poly p2) =
        Poly (catMaybes (takeWhile isJust (zipWith addTerm (fill p1) (fill p2))))

        where fill p = fmap Just p <> repeat Nothing

      evalTerm :: Num n => n -> Term n -> n
      evalTerm v Term{exp,coeff} = coeff * (v ^ exp)

      evalPoly :: Num n => Poly n -> n -> n
      evalPoly p x =
        coerce (foldMap (Sum . evalTerm x) (terms p))
    #+end_src

* Examples

    #+begin_src haskell
      example1 :: Poly Int
      example1 = toPoly [1, 2, 3]

      example2 :: Poly Int
      example2 = toPoly [1, -2, 3]

      example3 :: Poly Int
      example3 = toPoly [-1, -2, -3]

      example4 :: Poly Int
      example4 = toPoly [-1, 0, -2, 1]

      example5 :: Poly Int
      example5 = toPoly [1, -1]

      example6 :: Poly Int
      example6 = toPoly [1, 1]

      example7 :: Poly Double
      example7 = toPoly [0.6, -0.3, 1.0]

      example8 :: Poly Double
      example8 = toPoly [0.0, -0.25, 1.0, 5.55]
    #+end_src

* Multiplication

  #+begin_src haskell
    distributeTerm :: Num n => Poly n -> Term n -> Poly n
    distributeTerm p Term{exp,coeff}  =
      Poly (replicate exp 0 <> fmap (* coeff) (coerce p))

    distributePoly :: Num n => Poly n -> Poly n -> [Poly n]
    distributePoly p1 p2 = distributeTerm p2 <$> terms p1

    multPoly :: forall n. Num n => Poly n -> Poly n -> Poly n
    multPoly p1 p2 =
      coerce (fold (coerce @_ @[Sum (Poly n)] (distributePoly p1 p2)))
  #+end_src

* Are ~Poly~'s some kind of existing structure?

  This seems ok, but is kind of... not good?

  #+begin_src haskell
    instance Num n => Num (Poly n) where
      (+) = addPoly
      (*) = multPoly
      fromInteger = Poly . pure . fromInteger
      negate = Poly . fmap negate . coerce
       -- I don't know what these two are
      abs = undefined
      signum = undefined
  #+end_src
